#!/usr/bin/env python
"""
Building Energy Prediction

This software reads an input file (a required argument) containing 
building energy data in a format similar to example file. 
It then trains a model and estimates the error associated
with predictions using the model.

@author Paul Raftery <p.raftery@berkeley.edu>
@author Tyler Hoyt <thoyt@berkeley.edu>
"""

from mave.core import Preprocessor, ModelAggregator, SingleModelMnV
from datetime import datetime
import pdb
import argparse, logging

def mave(input_file=None,
         start_retrofit=None,
         **kwargs):
    f = open(input_file, 'Ur')
    changepoints = [
                   (start_retrofit,Preprocessor.POST_DATA_TAG)
                   ]
    mnv = SingleModelMnV(input_file=f,changepoints=changepoints,**kwargs)
    logger.info(mnv)

if __name__=='__main__': 
    # parse args
    prs = argparse.ArgumentParser()
    # required argument
    prs.add_argument("input_file", 
                     help="filename for input data")
    prs.add_argument("start_retrofit", 
                     help="datetime at which post-retrofit period begins")
    # output controls
    prs.add_argument("-v", "--verbose", action="store_true",
                     help="increase output verbosity")
    prs.add_argument("-p", "--print_screen", action="store_true",
                     help="print to screen as well as log file")
    prs.add_argument("-s", "--save", action="store_true",
                     help="save model and output detailed results")
    # high level controls
    prs.add_argument("-n", "--n_jobs", type=int, default=-1,
                     help="number of parallel jobs (default uses max available")
    prs.add_argument("-c", "--comp_time", type=float, default=1.0,
                     help="roughly linear scalar for computational time")
    # option to provide more advanced control using a configuration file
    prs.add_argument("-conf", "--config_file", type=str, default=None,
                     help="use a configuration file for more advanced input")
    args = prs.parse_args()  
    
    # set up logging to screen and file
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    fo = logging.FileHandler("mave.log")
    fo.setLevel(logging.INFO)
    logger.addHandler(fo)
    if args.print_screen:
    # log to screen also
        po = logging.StreamHandler()
        po.setLevel(logging.INFO)
        logger.addHandler(po)
    logger.info("\nAssessing input file: %s" % args.input_file)
    
    mave(**args.__dict__)

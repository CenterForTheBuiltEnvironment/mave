#!/usr/bin/env python
"""
Returns a csv file containing interpolated weather data
for a given address from the nearest station available 
from weatherunderground.com.

Arguments:
an address (uses google maps search api)
a year or a start and end date

@author Paul Raftery <p.raftery@berkeley.edu>
"""

import pdb
import mave.location
import argparse
import pprint
import dateutil.parser
from datetime import datetime
import time
import logging

logging.basicConfig(filename='mave-weather.log', level=logging.INFO)
log = logging.getLogger("mave")
log.addHandler(logging.StreamHandler())

def main(address=None,
         start=None,
         end=None,
         year=None,
         interval=None,
         **kwargs):
    l = mave.location.Location(address)
    log.info(("Identified address as %s, at lat: %s long: %s)"
             %(l.real_addrs,l.lat,l.lon)))
    log.info("Nearest geocode (weather station) is: %s"%l.geocode)
    if start is not None and end is not None:
        s = dateutil.parser.parse(start)
        e = dateutil.parser.parse(end)
    else:
        log.info('Start and end date not provided, using year instead')
        if year is None:
            year = datetime.now().year-1
            log.info('Year not provided, using default: last year (%i)'%year)
        s = datetime(year,1,1,0,0)
        e = datetime(year+1,1,1,0,0)
    if interval is None:
        interval = 60
        log.info('No interval provided, using default: %i minutes'%interval)
    log.info('Downloading weather, which may take several minutes...')
    hist_weather = mave.location.Weather(start=s,
                                         end=e,
                                         key=None,
                                         geocode=l.geocode,
                                         interp_interval=interval,
                                         save=True)               
    log.info(('Interpolated weather data saved to %s_weather.csv'
             %l.geocode))
    
if __name__=='__main__': 
    # parse args
    prs = argparse.ArgumentParser()
    # required argument
    prs.add_argument("address", 
                     help="an address (uses google maps search API)")
    # optional args
    prs.add_argument("-s", "--start", 
                     help="datetime representing start of period")
    prs.add_argument("-e", "--end", 
                     help="datetime representing end of period")
    prs.add_argument("-y", "--year", type=int,
                     help="year of historical data requested")
    prs.add_argument("-i", "--interval", type=int,
                     help="interval (in minutes) for interpolation")
    args = prs.parse_args()  
    main(**args.__dict__)

